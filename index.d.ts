/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsKmsArn".
 */
export type AwsKmsArn =
  | {
      [k: string]: unknown;
    }
  | string;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "errorCode".
 */
export type ErrorCode = string;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "functionName".
 */
export type FunctionName = string;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "serviceName".
 */
export type ServiceName = string;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsAlbListenerArn".
 */
export type AwsAlbListenerArn = string;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsAlexaEventToken".
 */
export type AwsAlexaEventToken = string;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsApiGatewayAbbreviatedArn".
 */
export type AwsApiGatewayAbbreviatedArn = string;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsApiGatewayApiKeys".
 */
export type AwsApiGatewayApiKeys = (
  | string
  | (
      | {
          [k: string]: unknown;
        }
      | {
          [k: string]: unknown;
        }
    )
  | {
      [k: string]: string[];
    }
)[];
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsArn".
 */
export type AwsArn =
  | string
  | (
      | {
          "Fn::ImportValue": unknown;
        }
      | {
          "Fn::Join": [string, unknown[]];
        }
      | {
          "Fn::GetAtt": string[];
        }
      | {
          Ref: string;
        }
      | {
          "Fn::Sub": unknown;
        }
    );
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsArnString".
 */
export type AwsArnString = string;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsCfFunction".
 */
export type AwsCfFunction =
  | {
      "Fn::ImportValue": unknown;
    }
  | {
      "Fn::Join": [string, unknown[]];
    }
  | {
      "Fn::GetAtt": string[];
    }
  | {
      Ref: string;
    }
  | {
      "Fn::Sub": unknown;
    };
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsCfInstruction".
 */
export type AwsCfInstruction =
  | string
  | (
      | {
          "Fn::ImportValue": unknown;
        }
      | {
          "Fn::Join": [string, unknown[]];
        }
      | {
          "Fn::GetAtt": string[];
        }
      | {
          Ref: string;
        }
      | {
          "Fn::Sub": unknown;
        }
    );
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsIamPolicyAction".
 */
export type AwsIamPolicyAction = string[];
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsIamPolicyPrincipal".
 */
export type AwsIamPolicyPrincipal =
  | "*"
  | {
      AWS?:
        | "*"
        | (
            | string
            | (
                | {
                    "Fn::ImportValue": unknown;
                  }
                | {
                    "Fn::Join": [string, unknown[]];
                  }
                | {
                    "Fn::GetAtt": string[];
                  }
                | {
                    Ref: string;
                  }
                | {
                    "Fn::Sub": unknown;
                  }
              )
          )[];
      Federated?: string[];
      Service?: string[];
      CanonicalUser?: string[];
    };
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsIamPolicyResource".
 */
export type AwsIamPolicyResource =
  | "*"
  | (
      | string
      | (
          | {
              "Fn::ImportValue": unknown;
            }
          | {
              "Fn::Join": [string, unknown[]];
            }
          | {
              "Fn::GetAtt": string[];
            }
          | {
              Ref: string;
            }
          | {
              "Fn::Sub": unknown;
            }
        )
    )
  | (
      | "*"
      | (
          | string
          | (
              | {
                  "Fn::ImportValue": unknown;
                }
              | {
                  "Fn::Join": [string, unknown[]];
                }
              | {
                  "Fn::GetAtt": string[];
                }
              | {
                  Ref: string;
                }
              | {
                  "Fn::Sub": unknown;
                }
            )
        )
    )[];
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsIamPolicyStatements".
 */
export type AwsIamPolicyStatements = ({
  [k: string]: unknown;
} & (
  | {
      [k: string]: unknown;
    }
  | {
      [k: string]: unknown;
    }
) &
  (
    | {
        [k: string]: unknown;
      }
    | {
        [k: string]: unknown;
      }
  ))[];
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsLambdaLayers".
 */
export type AwsLambdaLayers = (
  | string
  | (
      | {
          "Fn::ImportValue": unknown;
        }
      | {
          "Fn::Join": [string, unknown[]];
        }
      | {
          "Fn::GetAtt": string[];
        }
      | {
          Ref: string;
        }
      | {
          "Fn::Sub": unknown;
        }
    )
)[];
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsLambdaMemorySize".
 */
export type AwsLambdaMemorySize = number;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsLambdaRole".
 */
export type AwsLambdaRole =
  | string
  | {
      "Fn::ImportValue": unknown;
    }
  | {
      "Fn::GetAtt": string[];
    };
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsLambdaRuntime".
 */
export type AwsLambdaRuntime =
  | "dotnetcore2.1"
  | "dotnetcore3.1"
  | "go1.x"
  | "java11"
  | "java8"
  | "java8.al2"
  | "nodejs10.x"
  | "nodejs12.x"
  | "nodejs14.x"
  | "provided"
  | "provided.al2"
  | "python2.7"
  | "python3.6"
  | "python3.7"
  | "python3.8"
  | "ruby2.5"
  | "ruby2.7";
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsLambdaTimeout".
 */
export type AwsLambdaTimeout = number;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsLambdaTracing".
 */
export type AwsLambdaTracing = ("Active" | "PassThrough") | boolean;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsLambdaVersioning".
 */
export type AwsLambdaVersioning = boolean;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsLogGroupName".
 */
export type AwsLogGroupName = string;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsResourceCondition".
 */
export type AwsResourceCondition = string;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsResourceDependsOn".
 */
export type AwsResourceDependsOn = string[];
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsResourcePolicyResource".
 */
export type AwsResourcePolicyResource =
  | "*"
  | (
      | string
      | (
          | {
              "Fn::ImportValue": unknown;
            }
          | {
              "Fn::Join": [string, unknown[]];
            }
          | {
              "Fn::GetAtt": string[];
            }
          | {
              Ref: string;
            }
          | {
              "Fn::Sub": unknown;
            }
        )
    )
  | string
  | (
      | "*"
      | (
          | string
          | (
              | {
                  "Fn::ImportValue": unknown;
                }
              | {
                  "Fn::Join": [string, unknown[]];
                }
              | {
                  "Fn::GetAtt": string[];
                }
              | {
                  Ref: string;
                }
              | {
                  "Fn::Sub": unknown;
                }
            )
        )
      | string
    )[];
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsResourcePolicyStatements".
 */
export type AwsResourcePolicyStatements = ({
  [k: string]: unknown;
} & (
  | {
      [k: string]: unknown;
    }
  | {
      [k: string]: unknown;
    }
) &
  (
    | {
        [k: string]: unknown;
      }
    | {
        [k: string]: unknown;
      }
  ))[];
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsS3BucketName".
 */
export type AwsS3BucketName = string;
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "ecrImageUri".
 */
export type EcrImageUri = string;

export interface AWS {
  configValidationMode?: "error" | "warn" | "off";
  custom?: {
    enterprise?: {
      collectApiGatewayLogs?: boolean;
      collectLambdaLogs?: boolean;
      compressLogs?: boolean;
      disableAwsSpans?: boolean;
      disableFrameworkInstrumentation?: boolean;
      disableHttpSpans?: boolean;
      logAccessIamRole?: string;
      logIngestMode?: "push" | "pull";
    };
    [k: string]: unknown;
  };
  disabledDeprecations?: "*" | string[];
  enableLocalInstallationFallback?: boolean;
  frameworkVersion?: string;
  functions?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-zA-Z0-9-_]+$".
     */
    [k: string]: {
      name?: string;
      events?: (
        | {
            __schemaWorkaround__: null;
          }
        | {
            schedule:
              | string
              | {
                  rate: string;
                  enabled?: boolean;
                  name?: string;
                  description?: string;
                  input?:
                    | string
                    | (
                        | {
                            body: string;
                          }
                        | {
                            [k: string]: unknown;
                          }
                      );
                  inputPath?: string;
                  inputTransformer?: {
                    inputTemplate: string;
                    inputPathsMap?: {
                      [k: string]: unknown;
                    };
                  };
                };
          }
        | {
            s3:
              | string
              | {
                  bucket: string;
                  event?: string;
                  existing?: boolean;
                  rules?: {
                    prefix?: string;
                    suffix?: string;
                  }[];
                };
          }
        | {
            http:
              | string
              | {
                  async?: boolean;
                  authorizer?:
                    | string
                    | {
                        arn?:
                          | string
                          | (
                              | {
                                  "Fn::ImportValue": unknown;
                                }
                              | {
                                  "Fn::Join": [string, unknown[]];
                                }
                              | {
                                  "Fn::GetAtt": string[];
                                }
                              | {
                                  Ref: string;
                                }
                              | {
                                  "Fn::Sub": unknown;
                                }
                            );
                        authorizerId?:
                          | string
                          | (
                              | {
                                  "Fn::ImportValue": unknown;
                                }
                              | {
                                  "Fn::Join": [string, unknown[]];
                                }
                              | {
                                  "Fn::GetAtt": string[];
                                }
                              | {
                                  Ref: string;
                                }
                              | {
                                  "Fn::Sub": unknown;
                                }
                            );
                        claims?: string[];
                        identitySource?: string;
                        identityValidationExpression?: string;
                        managedExternally?: boolean;
                        name?: string;
                        resultTtlInSeconds?: number;
                        scopes?: string[];
                        type?: string | string | string | string;
                      };
                  connectionId?: string;
                  connectionType?: string | string;
                  cors?:
                    | boolean
                    | (
                        | {
                            [k: string]: unknown;
                          }
                        | {
                            [k: string]: unknown;
                          }
                      );
                  integration?: string | string | string | string | string | string | string | string | string | string;
                  method: string;
                  operationId?: string;
                  path: string;
                  private?: boolean;
                  request?: {
                    contentHandling?: "CONVERT_TO_BINARY" | "CONVERT_TO_TEXT";
                    method?: string;
                    parameters?: {
                      querystrings?: {
                        [k: string]:
                          | boolean
                          | {
                              required?: boolean;
                              mappedValue?: string;
                            };
                      };
                      headers?: {
                        [k: string]:
                          | boolean
                          | {
                              required?: boolean;
                              mappedValue?: string;
                            };
                      };
                      paths?: {
                        [k: string]:
                          | boolean
                          | {
                              required?: boolean;
                              mappedValue?: string;
                            };
                      };
                    };
                    passThrough?: "NEVER" | "WHEN_NO_MATCH" | "WHEN_NO_TEMPLATES";
                    schema?: {
                      [k: string]: {
                        [k: string]: unknown;
                      };
                    };
                    template?: {
                      [k: string]: string;
                    };
                    uri?: string;
                  };
                  response?: {
                    contentHandling?: "CONVERT_TO_BINARY" | "CONVERT_TO_TEXT";
                    headers?: {
                      [k: string]: string;
                    };
                    template?: string;
                    statusCodes?: {
                      [k: string]: {
                        headers?: {
                          [k: string]: string;
                        };
                        pattern?: string;
                        template?:
                          | string
                          | {
                              [k: string]: string;
                            };
                      };
                    };
                  };
                };
          }
        | {
            websocket:
              | string
              | {
                  route: string;
                  routeResponseSelectionExpression?: "$default";
                  authorizer?:
                    | string
                    | string
                    | (
                        | {
                            [k: string]: unknown;
                          }
                        | {
                            [k: string]: unknown;
                          }
                      );
                };
          }
        | {
            sns:
              | string
              | string
              | (
                  | {
                      [k: string]: unknown;
                    }
                  | {
                      [k: string]: unknown;
                    }
                );
          }
        | {
            stream:
              | string
              | (
                  | {
                      arn:
                        | {
                            "Fn::ImportValue": unknown;
                          }
                        | {
                            "Fn::Join": [string, unknown[]];
                          }
                        | {
                            "Fn::GetAtt": string[];
                          }
                        | {
                            Ref: string;
                          }
                        | {
                            "Fn::Sub": unknown;
                          };
                      [k: string]: unknown;
                    }
                  | {
                      arn: string;
                      [k: string]: unknown;
                    }
                );
          }
        | {
            kafka: {
              accessConfigurations: {
                vpcSubnet?: string[];
                vpcSecurityGroup?: string[];
                saslScram256Auth?: string[];
                saslScram512Auth?: string[];
              };
              batchSize?: number;
              enabled?: boolean;
              bootstrapServers: string[];
              startingPosition?: "LATEST" | "TRIM_HORIZON";
              topic: string;
            };
          }
        | {
            msk: {
              arn:
                | string
                | {
                    "Fn::ImportValue": unknown;
                  }
                | {
                    Ref: string;
                  };
              batchSize?: number;
              enabled?: boolean;
              startingPosition?: "LATEST" | "TRIM_HORIZON";
              topic: string;
            };
          }
        | {
            alb: {
              authorizer?: string[];
              conditions: {
                header?: {
                  name: string;
                  values: string[];
                };
                host?: string[];
                ip?: (string | string)[];
                method?: string[];
                path?: string[];
                query?: {
                  [k: string]: string;
                };
              };
              healthCheck?:
                | boolean
                | {
                    healthyThresholdCount?: number;
                    intervalSeconds?: number;
                    matcher?: {
                      httpCode?: string;
                    };
                    path?: string;
                    timeoutSeconds?: number;
                    unhealthyThresholdCount?: number;
                  };
              listenerArn:
                | string
                | {
                    Ref: string;
                  };
              multiValueHeaders?: boolean;
              priority: number;
            };
          }
        | {
            alexaSkill:
              | string
              | {
                  appId: string;
                  enabled?: boolean;
                };
          }
        | {
            alexaSmartHome:
              | string
              | {
                  appId: string;
                  enabled?: boolean;
                };
          }
        | {
            iot: {
              sql: string;
              sqlVersion?: "2015-10-08" | "2016-03-23" | "beta";
              name?: string;
              enabled?: boolean;
              description?: string;
            };
          }
        | {
            iotFleetProvisioning: {
              enabled?: boolean;
              provisioningRoleArn:
                | string
                | (
                    | {
                        "Fn::ImportValue": unknown;
                      }
                    | {
                        "Fn::Join": [string, unknown[]];
                      }
                    | {
                        "Fn::GetAtt": string[];
                      }
                    | {
                        Ref: string;
                      }
                    | {
                        "Fn::Sub": unknown;
                      }
                  );
              templateBody: {
                [k: string]: unknown;
              };
              templateName?: string;
            };
          }
        | {
            cloudwatchEvent: {
              event?: {
                [k: string]: unknown;
              };
              input?:
                | string
                | {
                    [k: string]: unknown;
                  };
              inputPath?: string;
              inputTransformer?: {
                inputPathsMap?: {
                  [k: string]: string;
                };
                inputTemplate: string;
              };
              description?: string;
              name?: string;
              enabled?: boolean;
            };
          }
        | {
            cloudwatchLog:
              | string
              | {
                  logGroup: string;
                  filter?: string;
                };
          }
        | {
            cognitoUserPool: {
              pool: string;
              trigger:
                | "PreSignUp"
                | "PostConfirmation"
                | "PreAuthentication"
                | "PostAuthentication"
                | "PreTokenGeneration"
                | "CustomMessage"
                | "DefineAuthChallenge"
                | "CreateAuthChallenge"
                | "VerifyAuthChallengeResponse"
                | "UserMigration";
              existing?: boolean;
            };
          }
        | {
            eventBridge:
              | {
                  [k: string]: unknown;
                }
              | {
                  [k: string]: unknown;
                };
          }
        | {
            sqs:
              | (
                  | string
                  | (
                      | {
                          "Fn::ImportValue": unknown;
                        }
                      | {
                          "Fn::Join": [string, unknown[]];
                        }
                      | {
                          "Fn::GetAtt": string[];
                        }
                      | {
                          Ref: string;
                        }
                      | {
                          "Fn::Sub": unknown;
                        }
                    )
                )
              | {
                  arn:
                    | string
                    | (
                        | {
                            "Fn::ImportValue": unknown;
                          }
                        | {
                            "Fn::Join": [string, unknown[]];
                          }
                        | {
                            "Fn::GetAtt": string[];
                          }
                        | {
                            Ref: string;
                          }
                        | {
                            "Fn::Sub": unknown;
                          }
                      );
                  batchSize?: number;
                  enabled?: boolean;
                  maximumBatchingWindow?: number;
                };
          }
        | {
            cloudFront: {
              behavior?: {
                AllowedMethods?:
                  | ("GET" | "HEAD")[]
                  | ("GET" | "HEAD" | "OPTIONS")[]
                  | ("GET" | "HEAD" | "OPTIONS" | "PUT" | "PATCH" | "POST" | "DELETE")[];
                CachedMethods?: ("GET" | "HEAD")[] | ("GET" | "HEAD" | "OPTIONS")[];
                ForwardedValues?: {
                  Cookies?:
                    | {
                        Forward: "all" | "none";
                      }
                    | {
                        Forward: "whitelist";
                        WhitelistedNames: string[];
                      };
                  Headers?: string[];
                  QueryString: boolean;
                  QueryStringCacheKeys?: string[];
                };
                CachePolicyId?: string;
                Compress?: boolean;
                FieldLevelEncryptionId?: string;
                OriginRequestPolicyId?: string;
                SmoothStreaming?: boolean;
                TrustedSigners?: string[];
                ViewerProtocolPolicy?: "allow-all" | "redirect-to-https" | "https-only";
              };
              cachePolicy?:
                | {
                    [k: string]: unknown;
                  }
                | {
                    [k: string]: unknown;
                  };
              eventType?: "viewer-request" | "origin-request" | "origin-response" | "viewer-response";
              isDefaultOrigin?: boolean;
              includeBody?: boolean;
              origin?:
                | string
                | (
                    | {
                        [k: string]: unknown;
                      }
                    | {
                        [k: string]: unknown;
                      }
                  );
              pathPattern?: string;
            };
          }
        | {
            httpApi:
              | string
              | {
                  authorizer?:
                    | string
                    | (
                        | {
                            [k: string]: unknown;
                          }
                        | {
                            [k: string]: unknown;
                          }
                      );
                  method?: string;
                  path: string;
                };
          }
      )[];
      awsKmsKeyArn?:
        | {
            [k: string]: unknown;
          }
        | string;
      condition?: string;
      dependsOn?: string[];
      description?: string;
      destinations?: {
        onSuccess?: string;
        onFailure?: string;
      };
      disableLogs?: boolean;
      environment?: {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[A-Za-z_][a-zA-Z0-9_]*$".
         */
        [k: string]:
          | ""
          | (
              | string
              | (
                  | {
                      "Fn::ImportValue": unknown;
                    }
                  | {
                      "Fn::Join": [string, unknown[]];
                    }
                  | {
                      "Fn::GetAtt": string[];
                    }
                  | {
                      Ref: string;
                    }
                  | {
                      "Fn::Sub": unknown;
                    }
                )
            );
      };
      fileSystemConfig?: {
        arn:
          | string
          | {
              "Fn::GetAtt": string[];
            }
          | {
              "Fn::Join": [string, unknown[]];
            }
          | {
              "Fn::ImportValue": unknown;
            };
        localMountPath: string;
      };
      handler?: string;
      image?:
        | string
        | {
            name?: string;
            uri?: string;
            workingDirectory?: string;
            command?: string[];
            entryPoint?: string[];
          };
      kmsKeyArn?:
        | {
            [k: string]: unknown;
          }
        | string;
      layers?: (
        | string
        | (
            | {
                "Fn::ImportValue": unknown;
              }
            | {
                "Fn::Join": [string, unknown[]];
              }
            | {
                "Fn::GetAtt": string[];
              }
            | {
                Ref: string;
              }
            | {
                "Fn::Sub": unknown;
              }
          )
      )[];
      maximumEventAge?: number;
      maximumRetryAttempts?: number;
      memorySize?: number;
      onError?:
        | string
        | (
            | {
                "Fn::ImportValue": unknown;
              }
            | {
                "Fn::Join": [string, unknown[]];
              }
            | {
                "Fn::GetAtt": string[];
              }
            | {
                Ref: string;
              }
            | {
                "Fn::Sub": unknown;
              }
          );
      package?: {
        artifact?: string;
        exclude?: string[];
        include?: string[];
        individually?: boolean;
      };
      provisionedConcurrency?: number;
      reservedConcurrency?: number;
      role?:
        | string
        | {
            "Fn::ImportValue": unknown;
          }
        | {
            "Fn::GetAtt": string[];
          };
      runtime?:
        | "dotnetcore2.1"
        | "dotnetcore3.1"
        | "go1.x"
        | "java11"
        | "java8"
        | "java8.al2"
        | "nodejs10.x"
        | "nodejs12.x"
        | "nodejs14.x"
        | "provided"
        | "provided.al2"
        | "python2.7"
        | "python3.6"
        | "python3.7"
        | "python3.8"
        | "ruby2.5"
        | "ruby2.7";
      tags?: {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^(?!aws:)[\w./=+:\-_\x20]{1,128}$".
         */
        [k: string]: string;
      };
      timeout?: number;
      tracing?: ("Active" | "PassThrough") | boolean;
      versionFunction?: boolean;
      vpc?: {
        securityGroupIds?: (
          | string
          | (
              | {
                  "Fn::ImportValue": unknown;
                }
              | {
                  "Fn::Join": [string, unknown[]];
                }
              | {
                  "Fn::GetAtt": string[];
                }
              | {
                  Ref: string;
                }
              | {
                  "Fn::Sub": unknown;
                }
            )
        )[];
        subnetIds?: (
          | string
          | (
              | {
                  "Fn::ImportValue": unknown;
                }
              | {
                  "Fn::Join": [string, unknown[]];
                }
              | {
                  "Fn::GetAtt": string[];
                }
              | {
                  Ref: string;
                }
              | {
                  "Fn::Sub": unknown;
                }
            )
        )[];
        [k: string]: unknown;
      };
    };
  };
  package?: {
    individually?: boolean;
    path?: string;
    artifact?: string;
    exclude?: string[];
    include?: string[];
    excludeDevDependencies?: boolean;
  };
  plugins?:
    | {
        localPath?: string;
        modules: string[];
      }
    | string[];
  provider: {
    name: "aws";
    apiGateway?: {
      apiKeys?: (
        | string
        | (
            | {
                [k: string]: unknown;
              }
            | {
                [k: string]: unknown;
              }
          )
        | {
            [k: string]: string[];
          }
      )[];
      apiKeySourceType?: string;
      binaryMediaTypes?: string[];
      description?: string;
      metrics?: boolean;
      minimumCompressionSize?: number;
      resourcePolicy?: ({
        [k: string]: unknown;
      } & (
        | {
            [k: string]: unknown;
          }
        | {
            [k: string]: unknown;
          }
      ) &
        (
          | {
              [k: string]: unknown;
            }
          | {
              [k: string]: unknown;
            }
        ))[];
      restApiId?:
        | string
        | (
            | {
                "Fn::ImportValue": unknown;
              }
            | {
                "Fn::Join": [string, unknown[]];
              }
            | {
                "Fn::GetAtt": string[];
              }
            | {
                Ref: string;
              }
            | {
                "Fn::Sub": unknown;
              }
          );
      restApiResources?:
        | {
            path?: string;
            resourceId?: string;
          }[]
        | {
            [k: string]: unknown;
          };
      restApiRootResourceId?:
        | string
        | (
            | {
                "Fn::ImportValue": unknown;
              }
            | {
                "Fn::Join": [string, unknown[]];
              }
            | {
                "Fn::GetAtt": string[];
              }
            | {
                Ref: string;
              }
            | {
                "Fn::Sub": unknown;
              }
          );
      shouldStartNameWithService?: true;
      usagePlan?:
        | {
            quota?: {
              limit?: number;
              offset?: number;
              period?: "DAY" | "WEEK" | "MONTH";
            };
            throttle?: {
              burstLimit?: number;
              rateLimit?: number;
            };
          }
        | {
            [k: string]: {
              quota?: {
                limit?: number;
                offset?: number;
                period?: "DAY" | "WEEK" | "MONTH";
              };
              throttle?: {
                burstLimit?: number;
                rateLimit?: number;
              };
            };
          }[];
      websocketApiId?:
        | string
        | (
            | {
                "Fn::ImportValue": unknown;
              }
            | {
                "Fn::Join": [string, unknown[]];
              }
            | {
                "Fn::GetAtt": string[];
              }
            | {
                Ref: string;
              }
            | {
                "Fn::Sub": unknown;
              }
          );
    };
    apiKeys?: (
      | string
      | (
          | {
              [k: string]: unknown;
            }
          | {
              [k: string]: unknown;
            }
        )
      | {
          [k: string]: string[];
        }
    )[];
    apiName?: string;
    alb?: {
      targetGroupPrefix?: string;
      authorizers?: {
        [k: string]:
          | {
              type: "oidc";
              authorizationEndpoint: {
                [k: string]: unknown;
              };
              clientId: string;
              clientSecret?: string;
              issuer: {
                [k: string]: unknown;
              };
              tokenEndpoint: {
                [k: string]: unknown;
              };
              userInfoEndpoint: {
                [k: string]: unknown;
              };
              onUnauthenticatedRequest?: "allow" | "authenticate" | "deny";
              requestExtraParams?: {
                [k: string]: string;
              };
              scope?: string;
              sessionCookieName?: string;
              sessionTimeout?: number;
            }
          | {
              type: "cognito";
              userPoolArn:
                | string
                | (
                    | {
                        "Fn::ImportValue": unknown;
                      }
                    | {
                        "Fn::Join": [string, unknown[]];
                      }
                    | {
                        "Fn::GetAtt": string[];
                      }
                    | {
                        Ref: string;
                      }
                    | {
                        "Fn::Sub": unknown;
                      }
                  );
              userPoolClientId: string;
              userPoolDomain: string;
              onUnauthenticatedRequest?: "allow" | "authenticate" | "deny";
              requestExtraParams?: {
                [k: string]: string;
              };
              scope?: string;
              sessionCookieName?: string;
              sessionTimeout?: number;
            };
      };
    };
    cfnRole?:
      | string
      | (
          | {
              "Fn::ImportValue": unknown;
            }
          | {
              "Fn::Join": [string, unknown[]];
            }
          | {
              "Fn::GetAtt": string[];
            }
          | {
              Ref: string;
            }
          | {
              "Fn::Sub": unknown;
            }
        );
    cloudFront?: {
      cachePolicies?: {
        [k: string]: {
          Comment?: string;
          DefaultTTL: number;
          MaxTTL: number;
          MinTTL: number;
          ParametersInCacheKeyAndForwardedToOrigin: {
            CookiesConfig?: {
              CookieBehavior: "none" | "whitelist" | "allExcept" | "all";
              Cookies?: string[];
            };
            EnableAcceptEncodingBrotli?: boolean;
            EnableAcceptEncodingGzip?: boolean;
            HeadersConfig?: {
              HeaderBehavior: "none" | "whitelist";
              Headers?: string[];
            };
            QueryStringsConfig?: {
              QueryStringBehavior: "none" | "whitelist" | "allExcept" | "all";
              QueryStrings?: string[];
            };
          };
        };
      };
    };
    deploymentBucket?:
      | string
      | {
          blockPublicAccess?: boolean;
          skipPolicySetup?: boolean;
          maxPreviousDeploymentArtifacts?: number;
          name?: string;
          serverSideEncryption?: "AES256" | "aws:kms";
          sseCustomerAlgorithim?: string;
          sseCustomerKey?: string;
          sseCustomerKeyMD5?: string;
          sseKMSKeyId?: string;
          tags?: {
            /**
             * This interface was referenced by `undefined`'s JSON-Schema definition
             * via the `patternProperty` "^(?!aws:)[\w./=+:\-_\x20]{1,128}$".
             */
            [k: string]: string;
          };
        };
    deploymentPrefix?: string;
    endpointType?: string;
    environment?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Za-z_][a-zA-Z0-9_]*$".
       */
      [k: string]:
        | ""
        | (
            | string
            | (
                | {
                    "Fn::ImportValue": unknown;
                  }
                | {
                    "Fn::Join": [string, unknown[]];
                  }
                | {
                    "Fn::GetAtt": string[];
                  }
                | {
                    Ref: string;
                  }
                | {
                    "Fn::Sub": unknown;
                  }
              )
          );
    };
    httpApi?: {
      authorizers?: {
        [k: string]: {
          name?: string;
          identitySource:
            | string
            | (
                | {
                    "Fn::ImportValue": unknown;
                  }
                | {
                    "Fn::Join": [string, unknown[]];
                  }
                | {
                    "Fn::GetAtt": string[];
                  }
                | {
                    Ref: string;
                  }
                | {
                    "Fn::Sub": unknown;
                  }
              );
          issuerUrl:
            | string
            | (
                | {
                    "Fn::ImportValue": unknown;
                  }
                | {
                    "Fn::Join": [string, unknown[]];
                  }
                | {
                    "Fn::GetAtt": string[];
                  }
                | {
                    Ref: string;
                  }
                | {
                    "Fn::Sub": unknown;
                  }
              );
          audience:
            | (
                | string
                | (
                    | {
                        "Fn::ImportValue": unknown;
                      }
                    | {
                        "Fn::Join": [string, unknown[]];
                      }
                    | {
                        "Fn::GetAtt": string[];
                      }
                    | {
                        Ref: string;
                      }
                    | {
                        "Fn::Sub": unknown;
                      }
                  )
              )
            | (
                | string
                | (
                    | {
                        "Fn::ImportValue": unknown;
                      }
                    | {
                        "Fn::Join": [string, unknown[]];
                      }
                    | {
                        "Fn::GetAtt": string[];
                      }
                    | {
                        Ref: string;
                      }
                    | {
                        "Fn::Sub": unknown;
                      }
                  )
              )[];
        };
      };
      cors?:
        | boolean
        | {
            allowCredentials?: boolean;
            allowedHeaders?: string[];
            allowedMethods?: string[];
            allowedOrigins?: string[];
            exposedResponseHeaders?: string[];
            maxAge?: number;
          };
      id?:
        | string
        | {
            "Fn::ImportValue": string;
          };
      name?: string;
      payload?: string;
      metrics?: boolean;
    };
    iamManagedPolicies?: string[];
    iamRoleStatements?: ({
      [k: string]: unknown;
    } & (
      | {
          [k: string]: unknown;
        }
      | {
          [k: string]: unknown;
        }
    ) &
      (
        | {
            [k: string]: unknown;
          }
        | {
            [k: string]: unknown;
          }
      ))[];
    ecr?: {
      images: {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[a-z][a-z0-9-_]{1,31}$".
         */
        [k: string]:
          | {
              uri?: string;
              path?: string;
              file?: string;
            }
          | string;
      };
    };
    kmsKeyArn?:
      | {
          [k: string]: unknown;
        }
      | string;
    lambdaHashingVersion?: "20201221";
    layers?: (
      | string
      | (
          | {
              "Fn::ImportValue": unknown;
            }
          | {
              "Fn::Join": [string, unknown[]];
            }
          | {
              "Fn::GetAtt": string[];
            }
          | {
              Ref: string;
            }
          | {
              "Fn::Sub": unknown;
            }
        )
    )[];
    logRetentionInDays?: 1 | 3 | 5 | 7 | 14 | 30 | 60 | 90 | 120 | 150 | 180 | 365 | 400 | 545 | 731 | 1827 | 3653;
    logs?: {
      frameworkLambda?: boolean;
      httpApi?:
        | boolean
        | {
            format?: string;
          };
      restApi?:
        | boolean
        | {
            accessLogging?: boolean;
            executionLogging?: boolean;
            format?: string;
            fullExecutionData?: boolean;
            level?: "INFO" | "ERROR";
            role?:
              | string
              | (
                  | {
                      "Fn::ImportValue": unknown;
                    }
                  | {
                      "Fn::Join": [string, unknown[]];
                    }
                  | {
                      "Fn::GetAtt": string[];
                    }
                  | {
                      Ref: string;
                    }
                  | {
                      "Fn::Sub": unknown;
                    }
                );
            roleManagedExternally?: boolean;
          };
      websocket?:
        | boolean
        | {
            level?: "INFO" | "ERROR";
          };
      [k: string]: unknown;
    };
    memorySize?: number;
    notificationArns?: string[];
    profile?: string;
    region?:
      | "us-east-1"
      | "us-east-2"
      | "us-gov-east-1"
      | "us-gov-west-1"
      | "us-west-1"
      | "us-west-2"
      | "af-south-1"
      | "ap-east-1"
      | "ap-northeast-1"
      | "ap-northeast-2"
      | "ap-northeast-3"
      | "ap-south-1"
      | "ap-southeast-1"
      | "ap-southeast-2"
      | "ca-central-1"
      | "cn-north-1"
      | "cn-northwest-1"
      | "eu-central-1"
      | "eu-north-1"
      | "eu-south-1"
      | "eu-west-1"
      | "eu-west-2"
      | "eu-west-3"
      | "me-south-1"
      | "sa-east-1";
    resourcePolicy?: ({
      [k: string]: unknown;
    } & (
      | {
          [k: string]: unknown;
        }
      | {
          [k: string]: unknown;
        }
    ) &
      (
        | {
            [k: string]: unknown;
          }
        | {
            [k: string]: unknown;
          }
      ))[];
    role?:
      | string
      | {
          "Fn::ImportValue": unknown;
        }
      | {
          "Fn::GetAtt": string[];
        };
    rolePermissionsBoundary?: string;
    rollbackConfiguration?: {
      RollbackTriggers?: {
        Arn: string;
        Type: "AWS::CloudWatch::Alarm";
      }[];
      MonitoringTimeInMinutes?: number;
    };
    runtime?:
      | "dotnetcore2.1"
      | "dotnetcore3.1"
      | "go1.x"
      | "java11"
      | "java8"
      | "java8.al2"
      | "nodejs10.x"
      | "nodejs12.x"
      | "nodejs14.x"
      | "provided"
      | "provided.al2"
      | "python2.7"
      | "python3.6"
      | "python3.7"
      | "python3.8"
      | "ruby2.5"
      | "ruby2.7";
    s3?: {
      [k: string]: {
        accelerateConfiguration?: {
          AccelerationStatus: "Enabled" | "Suspended";
        };
        accessControl?: string;
        analyticsConfigurations?: {
          Id: string;
          Prefix?: string;
          StorageClassAnalysis: {
            DataExport?: {
              Destination: {
                BucketAccountId?: string;
                BucketArn:
                  | string
                  | (
                      | {
                          "Fn::ImportValue": unknown;
                        }
                      | {
                          "Fn::Join": [string, unknown[]];
                        }
                      | {
                          "Fn::GetAtt": string[];
                        }
                      | {
                          Ref: string;
                        }
                      | {
                          "Fn::Sub": unknown;
                        }
                    );
                Format: "CSV" | "ORC" | "Parquet";
                Prefix?: string;
              };
              OutputSchemaVersion: "V_1";
            };
          };
          TagFilters?: {
            Key: string;
            Value: string;
          }[];
        }[];
        bucketEncryption?: {
          ServerSideEncryptionConfiguration: {
            ServerSideEncryptionByDefault?: {
              KMSMasterKeyID?:
                | (
                    | string
                    | (
                        | {
                            "Fn::ImportValue": unknown;
                          }
                        | {
                            "Fn::Join": [string, unknown[]];
                          }
                        | {
                            "Fn::GetAtt": string[];
                          }
                        | {
                            Ref: string;
                          }
                        | {
                            "Fn::Sub": unknown;
                          }
                      )
                  )
                | string;
              SSEAlgorithm: "AES256" | "aws:kms";
            };
          }[];
        };
        bucketName?: string;
        corsConfiguration?: {
          CorsRules: {
            AllowedHeaders?: string[];
            AllowedMethods: ("GET" | "PUT" | "HEAD" | "POST" | "DELETE")[];
            AllowedOrigins: string[];
            ExposedHeaders?: string[];
            Id?: string;
            MaxAge?: number;
          }[];
        };
        inventoryConfigurations?: {
          Destination: {
            BucketAccountId?: string;
            BucketArn:
              | string
              | (
                  | {
                      "Fn::ImportValue": unknown;
                    }
                  | {
                      "Fn::Join": [string, unknown[]];
                    }
                  | {
                      "Fn::GetAtt": string[];
                    }
                  | {
                      Ref: string;
                    }
                  | {
                      "Fn::Sub": unknown;
                    }
                );
            Format: "CSV" | "ORC" | "Parquet";
            Prefix?: string;
          };
          Enabled: boolean;
          Id: string;
          IncludedObjectVersions: "All" | "Current";
          OptionalFields?: string[];
          Prefix?: string;
          ScheduleFrequency: "Daily" | "Weekly";
        }[];
        lifecycleConfiguration?: {
          Rules: (
            | {
                [k: string]: unknown;
              }
            | {
                [k: string]: unknown;
              }
            | {
                [k: string]: unknown;
              }
            | {
                [k: string]: unknown;
              }
            | {
                [k: string]: unknown;
              }
            | {
                [k: string]: unknown;
              }
            | {
                [k: string]: unknown;
              }
            | {
                [k: string]: unknown;
              }
          )[];
        };
        loggingConfiguration?: {
          DestinationBucketName?:
            | string
            | (
                | {
                    "Fn::ImportValue": unknown;
                  }
                | {
                    "Fn::Join": [string, unknown[]];
                  }
                | {
                    "Fn::GetAtt": string[];
                  }
                | {
                    Ref: string;
                  }
                | {
                    "Fn::Sub": unknown;
                  }
              );
          LogFilePrefix?: string;
        };
        metricsConfigurations?: {
          Id: string;
          Prefix?: string;
          TagFilters?: {
            Key: string;
            Value: string;
          }[];
        }[];
        name?: string;
        notificationConfiguration?: {
          LambdaConfigurations?: {
            Event: string;
            Filter?: {
              S3Key: {
                Rules: {
                  Name: "prefix" | "suffix";
                  Value: string;
                }[];
              };
            };
            Function:
              | string
              | (
                  | {
                      "Fn::ImportValue": unknown;
                    }
                  | {
                      "Fn::Join": [string, unknown[]];
                    }
                  | {
                      "Fn::GetAtt": string[];
                    }
                  | {
                      Ref: string;
                    }
                  | {
                      "Fn::Sub": unknown;
                    }
                );
          }[];
          QueueConfigurations?: {
            Event: string;
            Filter?: {
              S3Key: {
                Rules: {
                  Name: "prefix" | "suffix";
                  Value: string;
                }[];
              };
            };
            Queue:
              | string
              | (
                  | {
                      "Fn::ImportValue": unknown;
                    }
                  | {
                      "Fn::Join": [string, unknown[]];
                    }
                  | {
                      "Fn::GetAtt": string[];
                    }
                  | {
                      Ref: string;
                    }
                  | {
                      "Fn::Sub": unknown;
                    }
                );
          }[];
          TopicConfigurations?: {
            Event: string;
            Filter?: {
              S3Key: {
                Rules: {
                  Name: "prefix" | "suffix";
                  Value: string;
                }[];
              };
            };
            Topic:
              | string
              | (
                  | {
                      "Fn::ImportValue": unknown;
                    }
                  | {
                      "Fn::Join": [string, unknown[]];
                    }
                  | {
                      "Fn::GetAtt": string[];
                    }
                  | {
                      Ref: string;
                    }
                  | {
                      "Fn::Sub": unknown;
                    }
                );
          }[];
        };
        objectLockConfiguration?: {
          ObjectLockEnabled?: "Enabled";
          Rule?: {
            DefaultRetention?: {
              Days?: number;
              Mode?: "COMPLIANCE" | "GOVERNANCE";
              Years?: number;
            };
          };
        };
        objectLockEnabled?: boolean;
        publicAccessBlockConfiguration?: {
          BlockPublicAcls?: boolean;
          BlockPublicPolicy?: boolean;
          IgnorePublicAcls?: boolean;
          RestrictPublicBuckets?: boolean;
        };
        replicationConfiguration?: {
          Role:
            | string
            | (
                | {
                    "Fn::ImportValue": unknown;
                  }
                | {
                    "Fn::Join": [string, unknown[]];
                  }
                | {
                    "Fn::GetAtt": string[];
                  }
                | {
                    Ref: string;
                  }
                | {
                    "Fn::Sub": unknown;
                  }
              );
          Rules: {
            DeleteMarkerReplication?: {
              Status?: "Disabled" | "Enabled";
            };
            Destination: {
              AccessControlTranslation?: {
                Owner: "Destination";
              };
              Account?: string;
              Bucket:
                | string
                | (
                    | {
                        "Fn::ImportValue": unknown;
                      }
                    | {
                        "Fn::Join": [string, unknown[]];
                      }
                    | {
                        "Fn::GetAtt": string[];
                      }
                    | {
                        Ref: string;
                      }
                    | {
                        "Fn::Sub": unknown;
                      }
                  );
              EncryptionConfiguration?: {
                ReplicaKmsKeyID: string;
              };
              Metrics?: {
                EventThreshold: {
                  Minutes: number;
                };
                Status: "Disabled" | "Enabled";
              };
              ReplicationTime?: {
                Status: "Disabled" | "Enabled";
                Time: {
                  Minutes: number;
                };
              };
              StorageClass?:
                | "DEEP_ARCHIVE"
                | "GLACIER"
                | "INTELLIGENT_TIERING"
                | "ONEZONE_IA"
                | "OUTPOSTS"
                | "REDUCED_REDUNDANCY"
                | "STANDARD"
                | "STANDARD_IA";
            };
            Filter?: {
              And?: {
                Prefix?: string;
                TagFilters?: {
                  Key: string;
                  Value: string;
                }[];
              };
              Prefix?: string;
              TagFilter?: {
                Key: string;
                Value: string;
              };
            };
            Id?: string;
            Prefix?: string;
            Priority?: number;
            SourceSelectionCriteria?: {
              SseKmsEncryptedObjects: {
                Status: "Disabled" | "Enabled";
              };
            };
            Status: "Disabled" | "Enabled";
          }[];
        };
        tags?: {
          Key: string;
          Value: string;
        }[];
        versioningConfiguration?: {
          Status: "Enabled" | "Suspended";
        };
        websiteConfiguration?: {
          ErrorDocument?: string;
          IndexDocument?: string;
          RedirectAllRequestsTo?: {
            HostName: string;
            Protocol?: "http" | "https";
          };
          RoutingRules?: {
            RedirectRule: {
              HostName?: string;
              HttpRedirectCode?: string;
              Protocol?: "http" | "https";
              ReplaceKeyPrefixWith?: string;
              ReplaceKeyWith?: string;
            };
            RoutingRuleCondition?: {
              HttpErrorCodeReturnedEquals?: string;
              KeyPrefixEquals?: string;
            };
          }[];
        };
      };
    };
    stage?: string;
    stackName?: string;
    stackParameters?: {
      ParameterKey?: string;
      ParameterValue?: string;
      UsePreviousValue?: boolean;
      ResolvedValue?: string;
    }[];
    stackPolicy?: ({
      [k: string]: unknown;
    } & (
      | {
          [k: string]: unknown;
        }
      | {
          [k: string]: unknown;
        }
    ) &
      (
        | {
            [k: string]: unknown;
          }
        | {
            [k: string]: unknown;
          }
      ))[];
    stackTags?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^(?!aws:)[\w./=+:\-_\x20]{1,128}$".
       */
      [k: string]: string;
    };
    tags?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^(?!aws:)[\w./=+:\-_\x20]{1,128}$".
       */
      [k: string]: string;
    };
    timeout?: number;
    tracing?: {
      apiGateway?: boolean;
      lambda?: ("Active" | "PassThrough") | boolean;
    };
    usagePlan?:
      | {
          quota?: {
            limit?: number;
            offset?: number;
            period?: "DAY" | "WEEK" | "MONTH";
          };
          throttle?: {
            burstLimit?: number;
            rateLimit?: number;
          };
        }
      | {
          [k: string]: {
            quota?: {
              limit?: number;
              offset?: number;
              period?: "DAY" | "WEEK" | "MONTH";
            };
            throttle?: {
              burstLimit?: number;
              rateLimit?: number;
            };
          };
        }[];
    vpc?: {
      securityGroupIds?: (
        | string
        | (
            | {
                "Fn::ImportValue": unknown;
              }
            | {
                "Fn::Join": [string, unknown[]];
              }
            | {
                "Fn::GetAtt": string[];
              }
            | {
                Ref: string;
              }
            | {
                "Fn::Sub": unknown;
              }
          )
      )[];
      subnetIds?: (
        | string
        | (
            | {
                "Fn::ImportValue": unknown;
              }
            | {
                "Fn::Join": [string, unknown[]];
              }
            | {
                "Fn::GetAtt": string[];
              }
            | {
                Ref: string;
              }
            | {
                "Fn::Sub": unknown;
              }
          )
      )[];
      [k: string]: unknown;
    };
    vpcEndpointIds?: (
      | string
      | (
          | {
              "Fn::ImportValue": unknown;
            }
          | {
              "Fn::Join": [string, unknown[]];
            }
          | {
              "Fn::GetAtt": string[];
            }
          | {
              Ref: string;
            }
          | {
              "Fn::Sub": unknown;
            }
        )
    )[];
    versionFunctions?: boolean;
    websocketsApiName?: string;
    websocketsApiRouteSelectionExpression?: string;
    variableSyntax?: string;
  };
  service:
    | string
    | {
        name: string;
        awsKmsKeyArn?:
          | {
              [k: string]: unknown;
            }
          | string;
      };
  unresolvedVariablesNotificationMode?: "error" | "warn";
  useDotenv?: true;
  resources?: {
    AWSTemplateFormatVersion?: string;
    Conditions?: {
      [k: string]: unknown;
    };
    Description?: string;
    Mappings?: {
      [k: string]: unknown;
    };
    Metadata?: {
      [k: string]: unknown;
    };
    Outputs?: {
      [k: string]: unknown;
    };
    Parameters?: {
      [k: string]: unknown;
    };
    Resources?: {
      "Fn::Transform"?: {
        Name: string;
        Parameters?: {
          [k: string]: unknown;
        };
      };
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[a-zA-Z0-9]{1,255}$".
       */
      [k: string]: {
        Type: string;
        Properties?: {
          [k: string]: unknown;
        };
        CreationPolicy?: {
          [k: string]: unknown;
        };
        DeletionPolicy?: string;
        DependsOn?: string[];
        Metadata?: {
          [k: string]: unknown;
        };
        UpdatePolicy?: {
          [k: string]: unknown;
        };
        UpdateReplacePolicy?: string;
        Condition?: string;
      };
    };
    Transform?: string[];
    extensions?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[a-zA-Z0-9]{1,255}$".
       */
      [k: string]: {
        Properties?: {
          [k: string]: unknown;
        };
        CreationPolicy?: {
          [k: string]: unknown;
        };
        DeletionPolicy?: string;
        DependsOn?: string[];
        Metadata?: {
          [k: string]: unknown;
        };
        UpdatePolicy?: {
          [k: string]: unknown;
        };
        UpdateReplacePolicy?: string;
        Condition?: string;
      };
    };
  };
  layers?: {
    [k: string]: {
      allowedAccounts?: string[];
      compatibleRuntimes?: (
        | "dotnetcore2.1"
        | "dotnetcore3.1"
        | "go1.x"
        | "java11"
        | "java8"
        | "java8.al2"
        | "nodejs10.x"
        | "nodejs12.x"
        | "nodejs14.x"
        | "provided"
        | "provided.al2"
        | "python2.7"
        | "python3.6"
        | "python3.7"
        | "python3.8"
        | "ruby2.5"
        | "ruby2.7"
      )[];
      description?: string;
      licenseInfo?: string;
      name?: string;
      package?: {
        artifact?: string;
        exclude?: string[];
        include?: string[];
      };
      path?: string;
      retain?: boolean;
    };
  };
  org?: string;
  app?: string;
  outputs?: {
    [k: string]:
      | string
      | number
      | boolean
      | unknown[]
      | {
          [k: string]: unknown;
        };
  };
}
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsCfGetAtt".
 */
export interface AwsCfGetAtt {
  "Fn::GetAtt": string[];
}
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsCfImport".
 */
export interface AwsCfImport {
  "Fn::ImportValue": unknown;
}
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsCfImportLocallyResolvable".
 */
export interface AwsCfImportLocallyResolvable {
  "Fn::ImportValue": string;
}
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsCfJoin".
 */
export interface AwsCfJoin {
  "Fn::Join": [string, unknown[]];
}
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsCfRef".
 */
export interface AwsCfRef {
  Ref: string;
}
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsCfSub".
 */
export interface AwsCfSub {
  "Fn::Sub": unknown;
}
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsLambdaEnvironment".
 */
export interface AwsLambdaEnvironment {
  /**
   * This interface was referenced by `AwsLambdaEnvironment`'s JSON-Schema definition
   * via the `patternProperty` "^[A-Za-z_][a-zA-Z0-9_]*$".
   */
  [k: string]:
    | ""
    | (
        | string
        | (
            | {
                "Fn::ImportValue": unknown;
              }
            | {
                "Fn::Join": [string, unknown[]];
              }
            | {
                "Fn::GetAtt": string[];
              }
            | {
                Ref: string;
              }
            | {
                "Fn::Sub": unknown;
              }
          )
      );
}
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsLambdaVpcConfig".
 */
export interface AwsLambdaVpcConfig {
  securityGroupIds?: (
    | string
    | (
        | {
            "Fn::ImportValue": unknown;
          }
        | {
            "Fn::Join": [string, unknown[]];
          }
        | {
            "Fn::GetAtt": string[];
          }
        | {
            Ref: string;
          }
        | {
            "Fn::Sub": unknown;
          }
      )
  )[];
  subnetIds?: (
    | string
    | (
        | {
            "Fn::ImportValue": unknown;
          }
        | {
            "Fn::Join": [string, unknown[]];
          }
        | {
            "Fn::GetAtt": string[];
          }
        | {
            Ref: string;
          }
        | {
            "Fn::Sub": unknown;
          }
      )
  )[];
  [k: string]: unknown;
}
/**
 * This interface was referenced by `AWS`'s JSON-Schema
 * via the `definition` "awsResourceTags".
 */
export interface AwsResourceTags {
  /**
   * This interface was referenced by `AwsResourceTags`'s JSON-Schema definition
   * via the `patternProperty` "^(?!aws:)[\w./=+:\-_\x20]{1,128}$".
   */
  [k: string]: string;
}
